// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @default(now())
    email       String      @unique
    active      Boolean     @default(false)
    notificationLevel NotificationLevel @default(all)
    firstName   String
    lastName    String?
}

model Pupil {
    id          String      @id @default(cuid())
    user        User        @relation(fields:[userId],references:[id])
    userId      String
}

model Volunteer {
    id          String      @id @default(cuid())
    user        User        @relation(fields:[userId],references:[id])
    userId      String
    offers      Offer[]
}

model Offer {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @default(now())
    volunteer   Volunteer   @relation(fields:[volunteerId],references:[id])
    volunteerId String
    description String
}

model AuthenticationData {
    id          String      @id @default(cuid())
    user        User        @relation(fields:[userId],references:[id])
    userId      String
    password    String
}


model PupilMatchRequest {
    id          String      @id @default(cuid())
    user        Pupil       @relation(fields:[requestor],references:[id])
    requestor   String
    parameters  String[]
}

model VolunteerMatchRequest {
    id          String      @id @default(cuid())
    user        Volunteer   @relation(fields:[requestor],references:[id])
    requestor   String
    parameters  String[]
    offer       Offer       @relation(fields:[offerId],references:[id])
    offerId     String
}

model RequestMatches {
    id              String          @id @default(cuid())
    pupilReq        PupilMatchRequest    @relation(fields:[pupilReqId],references:[id])
    volunteerReq    VolunteerMatchRequest    @relation(fields:[volunteerReqId],references:[id])
    pupilReqId      String
    volunteerReqId  String
}

model Notifications {
    id              String          @id @default(cuid())
    sender          String          @default("ayush.pandey@corona-school.de")
    recipient       User            @relation(fields:[recipientEmail],references:[email])
    recipientEmail  String
    subject         String
    textContent     String?
    htmlContent     String?
    status          NotificationStatus @default(pending)
}


enum NotificationLevel {
    necessary
    all
}

enum NotificationStatus {
    sent
    error
    pending
}